repeat

    task.wait()

until game:IsLoaded()

repeat

    task.wait()

until game.Players

repeat

    task.wait()

until game.Players.LocalPlayer

wait(5)

LoadedUiHub = false

local b = syn and syn.request or identifyexecutor() == "Arceus X" and request or http_request or requests

local d =

    b(

    {

        Url = ""

    }

)



function CheckSea(e)

    if game.PlaceId == 2753915549 then

        if e == 1 then

            return true

        end

    elseif game.PlaceId == 4442272183 then

        if e == 2 then

            return true

        end

    elseif game.PlaceId == 7449423635 then

        if e == 3 then

            return true

        end

    end

    return false

end

w = task.wait

t = task

local g = loadstring(game:HttpGet "https://raw.githubusercontent.com/ic3w0lf22/Roblox-Account-Manager/master/RAMAccount.lua")(



)

TempleOfTimeCFrame =

    CFrame.new(

    28734.3945,

    14888.2324,

    -109.071777,

    -0.650207579,

    4.1780531e-08,

    -0.759756625,

    1.97876595e-08,

    1,

    3.80575109e-08,

    0.759756625,

    9.71147784e-09,

    -0.650207579

)

local h = {

    ["Attack No CD Aura"] = false,

    ["Ignore Y"] = false,

    ["Team"] = "Pirates",

    ["Tween Speed"] = 350,

    ["CDAAT"] = 80,

    ["TimeWait"] = 10,

    ["ChoosenRaid"] = "Flame"

}

if _G.TaoCuttay then

    h["CuttayV4"] = true

end

HttpService = game:GetService("HttpService")

local i = ".aya"

local j = "-BloxFruit.json"

local l = game.Players.LocalPlayer.Name .. j

if Saki then

    HttpService = game:GetService("HttpService")

    local i = ".aya"

    local j = "-BloxFruit.json"

    local l = game.Players.LocalPlayer.Name .. j

end

function SaveSettings(m, n)

    if m ~= nil then

        h[m] = n

    end

    HttpService = game:GetService("HttpService")

    if not isfolder(i) then

        makefolder(i)

    end

    writefile(i .. "/" .. l, HttpService:JSONEncode(h))

end

function ReadSetting()

    local s, o =

        pcall(

        function()

            HttpService = game:GetService("HttpService")

            if not isfolder(i) then

                makefolder(i)

            end

            return HttpService:JSONDecode(readfile(i .. "/" .. l))

        end

    )

    if s then

        return o

    else

        SaveSettings()

        return ReadSetting()

    end

end

function GetDistance(q)

    if type(q) == "instance" then

        if Instance:IsA("BasePart") or Instance:IsA("Part") then

            return (q.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude

        elseif Instance:FindFirstChild("HumanoidRootPart") then

            return (q.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude

        else

            for r, v in pairs(q:GetDescendants()) do

                if v:IsA("BasePart") or v:IsA("Part") then

                    return (v.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude

                end

            end

        end

    else

        return (q - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude

    end

end

h = ReadSetting()

hasv3 = false

CakePrinceFarmCFrame =

    CFrame.new(

    -2142.66821,

    71.2588654,

    -12327.4619,

    0.996939838,

    -4.33107843e-08,

    0.078172572,

    4.20252917e-08,

    1,

    1.80894251e-08,

    -0.078172572,

    -1.47488439e-08,

    0.996939838

)

BoneFarmCFrame =

    CFrame.new(

    -9505.55371,

    172.448059,

    6086.27588,

    0.927873373,

    -2.18353513e-09,

    -0.37289542,

    -4.01526146e-09,

    1,

    -1.58467728e-08,

    0.37289542,

    1.62010725e-08,

    0.927873373

)

function CheckAnyPlayerDistnaceInCFrame(u, x)

    for r, v in pairs(game.Players:GetChildren()) do

        pcall(

            function()

                if

                    v.Name ~= game.Players.LocalPlayer.Name and

                        (v.Character.HumanoidRootPart.Position - u.Position).Magnitude <= x

                 then

                    return v

                end

            end

        )

    end

end

spawn(

    function()

        while task.wait() do

            if h["CuttayV4"] then

                if not LoadedUiHub then

                    repeat

                        task.wait()

                    until LoadedUiHub

                end

                V4Status = CheckAcientOneStatus()

                v14 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("TempleClock", "Check")

                if not hasv3 then

                    hasv3 = string.find(CheckRace(), "V3") or string.find(CheckRace(), "V4")

                end

                h["Tween Speed"] = 300

                if LocalPlayerLevelValue < 2450 then

                    tablestatssave["Melee"] = true

                    tablestatssave["Defense"] = false

                    FastAttackSetting2:Set(100)

                    FastAttackSetting1:Set(15.5)

                    pcall(

                        function()

                            AutoStats_Toggle:Set(true)

                        end

                    )

                    h["Auto Stats"] = true

                    h["Melee Choosen"]["Superhuman"] = true

                    if AutoMelee_Toggle then

                        AutoMelee_Toggle:Set(true)

                    end

                    MethodFarm_Dropdown:Set("Level")

                    SelectWeaponType_Dropdown:Set("Melee")

                    Farm_Toggle:Set(true)

                    DoubleQuest_Toggle:Set(true)

                    if AutoSea2_Toggle then

                        AutoSea2_Toggle:Set(true)

                    end

                    if AutoSaber_Toggle then

                        AutoSaber_Toggle:Set(true)

                    end

                    if AutoPoleV1_Toggle then

                        AutoPoleV1_Toggle:Set(true)

                    end

                    h["Auto Saber"] = true

                    h["Auto Pole V1"] = true

                    h["Auto Sea 2"] = true

                    AutoActiveRace_Toggle:Set(true)

                    if AutoRaid_Toggle then

                        AutoRaid_Toggle:Set(true)

                    end

                    _G.TaoCanDiTrial = false

                    _G.HopNear = true

                elseif not hasv3 then

                    TeleportSea(2)

                    AutoUpgradeRace_Toggle:Set(true)

                    Farm_Toggle:Set(false)

                    if AutoRaid_Toggle then

                        AutoRaid_Toggle:Set(false)

                    end

                elseif v14 and v14.HadPoint then

                    TeleportSea(3)

                    MethodFarm_Dropdown:Set("Cake Prince")

                    SelectWeaponType_Dropdown:Set("Melee")

                    Farm_Toggle:Set(false)

                    AutoBuyGear_Toggle:Set(true)

                    if AutoRaid_Toggle then

                        AutoRaid_Toggle:Set(false)

                    end

                    AutoChooseGear_Toggle:Set(true)

                    _G.TaoCanDiTrial = false

                elseif

                    string.find(V4Status, "Trial") or

                        string.find(V4Status, "greatness") and

                            game.ReplicatedStorage.Remotes.CommF_:InvokeServer("CheckTempleDoor")

                 then

                    TeleportSea(3)

                    MethodFarm_Dropdown:Set("Cake Prince")

                    SelectWeaponType_Dropdown:Set("Melee")

                    Farm_Toggle:Set(false)

                    AutoBuyGear_Toggle:Set(true)

                    if AutoRaid_Toggle then

                        AutoRaid_Toggle:Set(false)

                    end

                    AutoChooseGear_Toggle:Set(true)

                    EnableAllTrial_Toggle:Set(true)

                    _G.TaoCanDiTrial = true

                    _G.HopNear = false

                elseif

                    string.find(V4Status, "Train") or string.find(V4Status, "Trains") or

                        string.find(V4Status, "sessions")

                 then

                    TeleportSea(3)

                    if CheckAnyPlayerDistnaceInCFrame(CakePrinceFarmCFrame, 1500) then

                        MethodFarm_Dropdown:Set("Bone")

                    else

                        MethodFarm_Dropdown:Set("Cake Prince")

                    end

                    SelectWeaponType_Dropdown:Set("Melee")

                    Farm_Toggle:Set(true)

                    AutoActiveRace_Toggle:Set(true)

                    AutoBuyGear_Toggle:Set(true)

                    if AutoRaid_Toggle then

                        AutoRaid_Toggle:Set(false)

                    end

                    AutoChooseGear_Toggle:Set(false)

                    _G.TaoCanDiTrial = false

                    _G.HopNear = true

                end

            end

        end

    end

)

repeat

    pcall(

        function()

            task.wait()

            if game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("Main"):FindFirstChild("ChooseTeam") then

                if string.find(tostring(h["Team"]), "Pirate") then

                    for r, v in pairs(

                        getconnections(

                            game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.Activated

                        )

                    ) do

                        v.Function()

                    end

                elseif string.find(tostring(h["Team"]), "Marine") then

                    for r, v in pairs(

                        getconnections(

                            game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Marines.Frame.ViewportFrame.TextButton.Activated

                        )

                    ) do

                        v.Function()

                    end

                else

                    for r, v in pairs(

                        getconnections(

                            game:GetService("Players").LocalPlayer.PlayerGui.Main.ChooseTeam.Container.Pirates.Frame.ViewportFrame.TextButton.Activated

                        )

                    ) do

                        v.Function()

                    end

                end

            end

        end

    )

until game.Players.LocalPlayer.Team ~= nil

w(1)

local y = game.PlaceId

if y == 2753915549 then

    Sea1 = true

elseif y == 4442272183 then

    Sea2 = true

elseif y == 7449423635 then

    Sea3 = true

end

local z = loadstring(game:HttpGet("https://raw.githubusercontent.com/DichVuSpace/FunctionScriptTemp/main/Library/OrionLibrary"))()

function MoonTextureId()

    if Sea1 then

        return game:GetService("Lighting").FantasySky.MoonTextureId

    elseif Sea2 then

        return game:GetService("Lighting").FantasySky.MoonTextureId

    elseif Sea3 then

        return game:GetService("Lighting").Sky.MoonTextureId

    end

end

concacsss = Saki and "Saki" or "YMF" 

function getIntroText() 

  if game.Players.LocalPlayer.Name == "Rip_NgaoGaming" then 

    return "Em Chào Anh Ngáo :3333333" 

    else

    return "Đĩ Mẹ Mày"

  end 

end

local A =

    z:MakeWindow(

    {

        Name = "Banana Hub",

        IntroEnabled = true,

        IntroText = getIntroText(),

        IntroIcon = "rbxassetid://13779309461",

        HidePremium = false,

        SaveConfig = false,

        ConfigFolder = "OrionTest"

    }

)

local B = A:MakeTab({Name = "Main", Icon = "rbxassetid://4483345998", PremiumOnly = false})

local C = A:MakeTab({Name = "Server ", Icon = "rbxassetid://4483345998", PremiumOnly = false})

local D = A:MakeTab({Name = "Extra Farm", Icon = "rbxassetid://4483345998", PremiumOnly = false})

local E = A:MakeTab({Name = "Sword & Melee", Icon = "rbxassetid://4483345998", PremiumOnly = false})

local F = A:MakeTab({Name = "Trial", Icon = "rbxassetid://4483345998", PremiumOnly = false})

function Notify(G, H, I)

    if G == nil or G == "" then

        G = "Not Titled"

    end

    if H == nil or H == "" then

        H = "No Any Descriptions"

    end

    if type(I) ~= "number" then

        I = 10

    end

    z:MakeNotification({Name = G, Content = H, Image = MoonTextureId(), Time = I})

end

local J = {}

Mob = ""

Mob1 = ""

plr = game.Players.LocalPlayer

local K = Instance.new("Folder")

K.Parent = game.Workspace

K.Name = "MobSpawns"

repeat

    wait()

until game.Workspace:FindFirstChild("MobSpawns")

function FunctionFoldermob()

    print("FunctionFoldermob")

    repeat

        wait()

        if game.Workspace:FindFirstChild("MobSpawns") then

            game.Workspace.MobSpawns:Destroy()

        end

    until not game.Workspace:FindFirstChild("MobSpawns")

    local K = Instance.new("Folder")

    K.Parent = game.Workspace

    K.Name = "MobSpawns"

    wait()

    repeat

        wait()

    until game.Workspace:FindFirstChild("MobSpawns")

    for r, v in pairs(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()) do

        local a = v:Clone()

        a.Parent = game.Workspace.MobSpawns

    end

    local L = {}

    for r, v in next, require(game:GetService("ReplicatedStorage").Quests) do

        for M, N in next, v do

            for O, P in next, N.Task do

                if P > 1 then

                    table.insert(L, O)

                end

            end

        end

    end

    if string.find(game:GetService("Workspace")["_WorldOrigin"].EnemySpawns:GetChildren()[1].Name, "Lv.") then

        for r, v in pairs(getnilinstances()) do

            if table.find(L, tostring(v.Name:gsub(" %pLv. %d+%p", ""))) then

                local a = v:Clone()

                a.Parent = game.Workspace.MobSpawns

            end

        end

    else

        for r, v in pairs(getnilinstances()) do

            if table.find(L, v.Name) then

                local a = v:Clone()

                if a.Parent then

                    a.Parent = game.Workspace.MobSpawns

                end

            end

        end

    end

end

FunctionFoldermob()

function GetMobSpawn(a)

    for r, v in next, game.Workspace.MobSpawns:GetChildren() do

        if v.Name == a then

            return v

        end

    end

end

function GetMobSpawnList(a)

    k = {}

    for r, v in next, game.Workspace.MobSpawns:GetChildren() do

        if v.Name == a then

            table.insert(k, v)

        end

    end

    return k

end 



local Q = require(game.ReplicatedStorage.Quests)

local R = {"BartiloQuest", "Trainees", "MarineQuest", "CitizenQuest"} 



local function S()

    local T = LocalPlayerLevelValue

    local min = 0

    if T >= 1450 and game.PlaceId == 4442272183 then

        Mob1 = "Water Fighter"

        Mob2 = "ForgottenQuest"

        Mob3 = 2

    elseif T >= 700 and game.PlaceId == 2753915549 then

        Mob1 = "Galley Captain"

        Mob2 = "FountainQuest"

        Mob3 = 2

    elseif

        T >= 2075 and autofullymelee and game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyDragonTalon", true) ~= 1 and

            game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyElectricClaw", true) == 1

     then

        Mob1 = "Posessed Mummy"

        Mob2 = "HauntedQuest2"

        Mob3 = 2

    else

        for r, v in pairs(Q) do

            for M, N in pairs(v) do

                local U = N.LevelReq

                for O, P in pairs(N.Task) do

                    if T >= U and U >= min and N.Task[O] > 1 and not table.find(R, tostring(r)) then

                        min = U

                        Mob1 = tostring(O)

                        Mob2 = r

                        Mob3 = M

                    end

                end

            end

        end

    end

end 



function CFrameQuest()

    QuestPoses = {}

    for r, v in pairs(getnilinstances()) do

        if

            v:IsA("Model") and v:FindFirstChild("Head") and v.Head:FindFirstChild("QuestBBG") and

                v.Head.QuestBBG.Title.Text == "QUEST"

         then

            QuestPoses[v.Name] = v.Head.CFrame * CFrame.new(0, -2, 2)

        end

    end

    for r, v in pairs(game.Workspace.NPCs:GetDescendants()) do

        if v.Name == "QuestBBG" and v.Title.Text == "QUEST" then

            QuestPoses[v.Parent.Parent.Name] = v.Parent.Parent.Head.CFrame * CFrame.new(0, -2, 2)

        end

    end

    DialoguesList = {}

    for r, v in pairs(require(game.ReplicatedStorage.DialoguesList)) do

        DialoguesList[v] = r

    end

    local V = getscriptclosure(game:GetService("Players").LocalPlayer.PlayerScripts.NPC)

    local W = {}

    for k, v in pairs(debug.getprotos(V)) do

        if #debug.getconstants(v) == 1 then

            table.insert(W, debug.getconstant(v, 1))

        end

    end

    local X = false

    local Y = {}

    for k, v in pairs(debug.getconstants(V)) do

        if type(v) == "string" then

            if v == "Players" then

                X = false

            end

            if not X then

                if v == "Blox Fruit Dealer" then

                    X = true

                end

            else

            end

            if X then

                table.insert(Y, v)

            end

        end

    end

    local Z = {}

    QuestPoint = {}

    for k, v in pairs(Y) do

        if QuestPoses[v] then

            Z[W[k]] = Y[k]

        end

    end

    for r, v in next, Z do

        QuestPoint[r] = QuestPoses[v]

    end

    QuestPoint["SkyExp1Quest"] =

        CFrame.new(

        -7857.28516,

        5544.34033,

        -382.321503,

        -0.422592998,

        0,

        0.906319618,

        0,

        1,

        0,

        -0.906319618,

        0,

        -0.422592998

    )

end 



function CheckDoubleQuest()

    local a = {}

    for r, v in pairs(Q) do

        for M, N in pairs(v) do

            local U = N.LevelReq

            for O, P in pairs(N.Task) do

                if O == Mob1 then

                    for _, a0 in next, v do

                        if a0.LevelReq <= game.Players.LocalPlayer.Data.Level.Value and a0.Name ~= "Town Raid" then

                            for a1, a2 in next, a0.Task do

                                if a2 > 1 then

                                    table.insert(a, a1)

                                end

                            end

                        end

                    end

                end

            end

        end

    end

    return a

end

local a3 = require(game.ReplicatedStorage:WaitForChild("GuideModule"))

function CheckQuestData()

    for r, v in next, a3.Data do

        if r == "QuestData" then

            return true

        end

    end

    return false

end 



function CheckNameDoubleQuest()

    local a

    if CheckQuestData() then

        for r, v in next, a3.Data.QuestData.Task do

            a = r

        end

    end

    return a

end

function CheckNameDoubleQuest2()

    local a

    local a4 = {}

    if CheckQuestData() then

        for r, v in next, a3.Data.QuestData.Task do

            a = r

            table.insert(a4, r)

        end

    end

    return a4

end



function CheckDoubleQuest2()

    checkq()

    local a5 = {}

    if

        game.Players.LocalPlayer.Data.Level.Value >= 10 and CheckQuestData() and

            CheckNameDoubleQuest() == Mob1 and

            #CheckNameDoubleQuest() > 2

     then

        for r, v in pairs(Q) do

            for M, N in pairs(v) do

                for O, P in pairs(N.Task) do

                    if tostring(O) == Mob1 then

                        for a6, a7 in next, v do

                            for a8, a9 in next, a7.Task do

                                if a8
